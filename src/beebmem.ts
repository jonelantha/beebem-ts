/****************************************************************
BeebEm - BBC Micro and Master 128 Emulator
Copyright (C) 1994  David Alan Gilbert
Copyright (C) 1997  Mike Wyatt
Copyright (C) 2001  Richard Gellman
Copyright (C) 2004  Ken Lowe
Copyright (C) 2004  Rob O'Donnell

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA  02110-1301, USA.
****************************************************************/

// Beebemulator - memory subsystem - David Alan Gilbert 16/10/1994
// Econet emulation: Rob O'Donnell robert@irrelevant.com 28/12/2004
// IDE Interface: JGH jgh@mdfs.net 25/12/2011

import { AdjustForIORead, AdjustForIOWrite, SyncIO } from "./6502core";
import { AtoDRead, AtoDWrite } from "./atodconv";
import { Disc8271Read, Disc8271Write } from "./disc8271";
import {
  SerialACIAReadRxData,
  SerialACIAReadStatus,
  SerialACIAWriteControl,
  SerialULARead,
  SerialULAWrite,
} from "./serial";
import { getIC32State, SysVIARead, SysVIAWrite } from "./sysvia";
import { UserVIARead, UserVIAWrite } from "./uservia";
import { CRTCRead, CRTCWrite, VideoULARead, VideoULAWrite } from "./video";

export function BEEBREADMEM_DIRECT(Address: number) {
  return WholeRam[Address];
}

export function BEEBWRITEMEM_DIRECT(Address: number, Value: number) {
  WholeRam[Address] = Value;
}

const WholeRam = new Uint8Array(0x10000);
export const getWholeRam = () => WholeRam;
const Roms = Array.from({ length: 16 }, () => new Uint8Array(0x4000));
//const RomPopulated = Array.from({ length: 16 }, () => false);

let PagedRomReg = 0;
let ROMSEL = 0;

/*----------------------------------------------------------------------------*/
/* Perform hardware address wrap around */
function WrapAddr(Address: number) {
  const offsets = [0x4000, 0x6000, 0x3000, 0x5800]; // page 419 of AUG is wrong

  if (Address < 0x8000) {
    return Address;
  }

  Address += offsets[(getIC32State() & 0x30) >> 4];
  Address &= 0x7fff;

  return Address;
}

/*----------------------------------------------------------------------------*/
/* This is for the use of the video routines.  It returns a pointer to
   a continuous area of 'n' bytes containing the contents of the
   'n' bytes of beeb memory starting at address 'a', with wrap around
   at 0x8000.  Potentially this routine may return a pointer into  a static
   buffer - so use the contents before recalling it
   'n' must be less than 1K in length.
   See 'BeebMemPtrWithWrapMo7' for use in Mode 7 - it's a special case.
*/

export function BeebMemPtrWithWrap(
  Address: number,
  Length: number,
): Uint8Array {
  if (Length === 0) return new Uint8Array(1024);

  Address = WrapAddr(Address);
  const EndAddress = WrapAddr(Address + Length - 1);

  if (Address <= EndAddress) {
    return new Uint8Array(WholeRam.buffer, Address, Length);
  }

  const tmpBuf = new Uint8Array(Length);

  let toCopy = 0x8000 - Address;

  if (toCopy > Length) toCopy = Length;

  const firstPart = WholeRam.slice(Address, Address + toCopy);
  if (toCopy > 0) {
    tmpBuf.set(firstPart);
  }

  const tmpBufPtr = toCopy;
  toCopy = Length - toCopy;

  const secondPart = WholeRam.slice(EndAddress - (toCopy - 1), EndAddress + 1);

  if (toCopy > 0) {
    tmpBuf.set(secondPart, tmpBufPtr);
  }

  // Tripling is for Shadow RAM handling
  return tmpBuf;
}

/*----------------------------------------------------------------------------*/

// Perform hardware address wrap around for mode 7.
//
// The beeb uses the 14-bit address generated by the 6845 in one of two
// different ways. If the top bit of the address (value 0x2000) is set then
// the beeb treats it as a mode 7 address, otherwise it treats it as a mode 0-6
// address. Note that this is independent of the teletext select bit in the
// video ULA.
//
// In mode 7 the 6845 is programmed with a start address between 0x2000 and
// 0x23ff to display data from 0x3C00 to 0x3fff or with a start address
// between 0x2800 and 0x2bff to display data from 0x7C00 to 0x7fff.
//
// This code handles wrapping at 1K by ignoring the 0x400 bit.
//
// If the 6845 is programmed with a start address of 0x2400 it accesses
// memory from 0x3c00 to 0x3fff then 0x7c00 to 0x7fff giving a 2K linear
// buffer.

// A = Address & 0x3ff
// 0x2000 - 0x23ff = [A = x - 0x2000] => 0x3c00 + A => same v
// 0x2400 - 0x27ff = [A = x - 0x2400] => 0x3c00 + A => same ^
// 0x2800 - 0x2bff = [A = x - 0x2800] => 0x4000 + 0x3c00 + A => 0x7c00 + A

function WrapAddrMode7(Address: number) {
  return ((Address & 0x800) << 3) | 0x3c00 | (Address & 0x3ff);
}

/*----------------------------------------------------------------------------*/

// Special case of BeebMemPtrWithWrap for use in mode 7

export function BeebMemPtrWithWrapMode7(
  Address: number,
  Length: number,
): Uint8Array {
  const mappedStart = WrapAddrMode7(Address);
  const mappedEnd = WrapAddrMode7(Address + Length);

  if (mappedStart + Length === mappedEnd) {
    return new Uint8Array(WholeRam.buffer, mappedStart, Length);
  }

  const tmpBuf = new Uint8Array(Length);

  for (let i = 0; i < Length; i++, Address++) {
    tmpBuf[i] = WholeRam[WrapAddrMode7(Address)];
  }

  return tmpBuf;
}

/*----------------------------------------------------------------------------*/
export function BeebReadMem(Address: number) {
  let Value = 0xff;

  if (Address >= 0x8000 && Address < 0xc000)
    return Roms[ROMSEL][Address - 0x8000];
  if (Address < 0xfc00) return WholeRam[Address];
  if (Address >= 0xff00) return WholeRam[Address];

  /* IO space */

  if (Address >= 0xfc00 && Address < 0xfe00) {
    SyncIO();
    AdjustForIORead();
  }

  /* VIAs first - games seem to do really heavy reading of these */
  /* Can read from a via using either of the two 16 bytes blocks */
  if ((Address & ~0xf) == 0xfe40 || (Address & ~0xf) == 0xfe50) {
    SyncIO();
    Value = SysVIARead(Address & 0xf);
    AdjustForIORead();
    return Value;
  }

  if ((Address & ~0xf) == 0xfe60 || (Address & ~0xf) == 0xfe70) {
    SyncIO();
    Value = UserVIARead(Address & 0xf);
    AdjustForIORead();
    return Value;
  }

  if ((Address & ~7) == 0xfe00) {
    SyncIO();
    Value = CRTCRead(Address & 0x7);
    AdjustForIORead();
    return Value;
  }

  if (Address == 0xfe08) {
    SyncIO();
    Value = SerialACIAReadStatus();
    AdjustForIORead();
    return Value;
  }

  if (Address == 0xfe09) {
    SyncIO();
    Value = SerialACIAReadRxData();
    AdjustForIORead();
    return Value;
  }

  if (Address == 0xfe10) {
    SyncIO();
    Value = SerialULARead();
    AdjustForIORead();
    return Value;
  }

  if ((Address & ~3) == 0xfe20) {
    return VideoULARead(Address & 0xf);
  }

  if ((Address & ~3) == 0xfe30) {
    return PagedRomReg; // report back ROMSEL - I'm sure the beeb allows ROMSEL read..
    // correct me if im wrong. - Richard Gellman
  }

  if ((Address & ~0x1f) == 0xfe80) {
    return Disc8271Read(Address & 0x7);
  }

  if ((Address & ~0x1f) == 0xfea0) {
    return 0xfe; // if not enabled
  }

  if ((Address & ~0x1f) == 0xfec0) {
    SyncIO();
    Value = AtoDRead(Address & 0xf);
    AdjustForIORead();
    return Value;
  }

  if ((Address & ~0x1f) == 0xfee0) {
    return 0xfe; //ReadTubeFromHostSide(Address & 7); // Read From Tube
  }

  /*if ((Address & ~0x3) == 0xfc10) {
		return 0xff;// (TeletextRead(Address & 0x3));
	}

	if ((Address & ~0x3)==0xfc40) {
		//if (SCSIDriveEnabled) return(SCSIRead(Address & 0x3));
	}

	if ((Address & ~0x7)==0xfc40) {
		if (IDEDriveEnabled)  return(IDERead(Address & 0x7));
	}

	if ((Address & ~0x3)==0xfdf0) {
		return SASIRead(Address & 0x3);
	}*/

  return 0xff;
} /* BeebReadMem */

/*----------------------------------------------------------------------------*/

function DoRomChange(NewBank: number) {
  ROMSEL = NewBank & 0xf;

  NewBank &= 0xf; // strip top bit if Model B
  PagedRomReg = NewBank;
}

/*----------------------------------------------------------------------------*/
export function BeebWriteMem(Address: number, Value: number) {
  if ((Value & 0xff) !== Value) throw "value error";

  if (Address < 0x8000) {
    WholeRam[Address] = Value;
    return;
  }

  if (Address < 0xc000 && Address >= 0x8000) {
    // Write to ROM
    return;
  }

  /* IO space */

  if (Address >= 0xfc00 && Address < 0xfe00) {
    throw "not impl";
    // SyncIO();
    // AdjustForIOWrite();
  }

  /* Can write to a via using either of the two 16 bytes blocks */
  if ((Address & ~0xf) == 0xfe40 || (Address & ~0xf) == 0xfe50) {
    SyncIO();
    AdjustForIOWrite();
    SysVIAWrite(Address & 0xf, Value);
    return;
  }

  /* Can write to a via using either of the two 16 bytes blocks */
  if ((Address & ~0xf) == 0xfe60 || (Address & ~0xf) == 0xfe70) {
    SyncIO();
    AdjustForIOWrite();
    UserVIAWrite(Address & 0xf, Value);
    return;
  }

  if ((Address & ~0x7) == 0xfe00) {
    SyncIO();
    AdjustForIOWrite();
    CRTCWrite(Address & 0x7, Value);
    return;
  }

  if (Address == 0xfe08) {
    SyncIO();
    AdjustForIOWrite();
    SerialACIAWriteControl(Value);
    return;
  }

  if (Address == 0xfe09) {
    throw "not impl";
    // SyncIO();
    // AdjustForIOWrite();
    // SerialACIAWriteTxData(Value);
    // return;
  }

  if (Address == 0xfe10) {
    SyncIO();
    AdjustForIOWrite();
    SerialULAWrite(Value);
    return;
  }

  if ((Address & ~0x3) == 0xfe20) {
    VideoULAWrite(Address & 0xf, Value);
    return;
  }

  if (Address >= 0xfe30 && Address < 0xfe34) {
    DoRomChange(Value);
    return;
  }

  if ((Address & ~0x1f) == 0xfe80) {
    Disc8271Write(Address & 7, Value);
    return;
  }

  if ((Address & ~0x1f) == 0xfec0) {
    SyncIO();
    AdjustForIOWrite();
    AtoDWrite(Address & 0xf, Value);
    return;
  }

  /*if ((Address & ~0xf) == 0xfee0)
	{
		//WriteTubeFromHostSide(Address & 7, Value);
	}

	if ((Address & ~0x3)==0xfc10) {
		//TeletextWrite((Address & 0x3),Value);
		return;
	}

	if ((Address & ~0x3)==0xfc40) {
		if (SCSIDriveEnabled) {
			SCSIWrite((Address & 0x3),Value);
			return;
		}
	}

	if ((Address & ~0x7)==0xfc40) {
		if (IDEDriveEnabled) {
			IDEWrite((Address & 0x7),Value);
			return;
		}
	}

	if ((Address & ~0x3)==0xfdf0) {
		//SASIWrite((Address & 0x3),Value);
		return;
	}*/
}

/*----------------------------------------------------------------------------*/

async function LoadOSRom(osRom: string) {
  const res = await fetch(osRom);
  const buffer = await res.arrayBuffer();

  if (buffer.byteLength !== 0x4000) throw "os rom length incorrect";

  WholeRam.set(new Uint8Array(buffer), 0xc000);

  // Try to read OS ROM memory map:
  // if ((extension = strrchr(fullname, '.')) != NULL)
  // 	*extension = 0;
  // strncat(fullname, ".map", _MAX_PATH);
  // DebugLoadMemoryMap(fullname, 16);
}

async function LoadPagedRom(bank: number, romName: string) {
  //RomPopulated[bank] = true;

  // Read ROM:
  const res = await fetch(romName);
  const buffer = await res.arrayBuffer();

  if (buffer.byteLength !== 0x4000) throw "rom length incorrect";

  Roms[bank].set(new Uint8Array(buffer));

  // Try to read ROM memory map:
  // if ((extension = strrchr(fullname, '.')) != NULL)
  // 	*extension = 0;
  // strncat(fullname, ".map", _MAX_PATH);
  // DebugLoadMemoryMap(fullname, bank);
}

async function BeebReadRoms() {
  // Clear ROMs
  for (let bank = 0; bank < 16; bank++) {
    //RomPopulated[bank] = false;
    Roms[bank].fill(0);
  }

  await LoadOSRom("roms/OS12.rom");
  await LoadPagedRom(14, "roms/DNFS.rom");
  await LoadPagedRom(15, "roms/BASIC2.rom");
}

/*----------------------------------------------------------------------------*/
export async function BeebMemInit(LoadRoms: boolean) {
  // Reset everything
  WholeRam.fill(0, 0, 0x8000);

  if (LoadRoms) {
    // This shouldn't be required for sideways RAM.
    //   DebugInitMemoryMaps();
    await BeebReadRoms(); // Only load roms on start
  }
  /* Put first ROM in */
  WholeRam.set(Roms[0xf], 0x8000);
  PagedRomReg = 0xf;
}
